@using Models

<nav>
    <ul class="pagination justify-content-center">
        @foreach (var item in _paginationButtons)
        {
            <li @onclick="() => OnSelectedPage(item)" style="cursor:pointer" class="page-item 
                @(item.Enabled ? null : "disabled") 
                @(item.Active ? "active" : null) ">
                <span class="page-link" href="#">@item.Text</span>
            </li>
        }
    </ul>
</nav>

@code {

    private List<PaginationButton> _paginationButtons;

    [Parameter]
    public PaginationMetaData MetaData { get; set; }

    [Parameter]
    public EventCallback<int> SelectedPage { get; set; }

    [Parameter]
    public int Spread { get; set; }//es el numero de botones a mostrar en la paginascion por ejemplo del 5 (12345 0 50,51,52,53,54,55)

    protected override void OnParametersSet()
    {
        CreatePaginationButtons();
    }

    private void CreatePaginationButtons()
    {
        _paginationButtons = new List<PaginationButton>();
        _paginationButtons.Add(new PaginationButton(MetaData.CurrentPage - 1, MetaData.HasPrevious, "Anterior"));

        for (int i = 1; i <= MetaData.TotalPages; i++)
        {
            if (i >= MetaData.CurrentPage - Spread && i <= MetaData.CurrentPage + Spread)
                _paginationButtons.Add(new PaginationButton(i, true, i.ToString()) { Active = MetaData.CurrentPage == i });
        }

        _paginationButtons.Add(new PaginationButton(MetaData.CurrentPage + 1, MetaData.HasNext, "Siguiente"));
    }

    private async Task OnSelectedPage(PaginationButton button)
    {
        if (button.Page == MetaData.CurrentPage || !button.Enabled)
            return;

        MetaData.CurrentPage = button.Page;
        await SelectedPage.InvokeAsync(button.Page);
    }
}
